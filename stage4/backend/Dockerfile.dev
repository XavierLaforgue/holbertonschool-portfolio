# syntax=docker/dockerfile:1 # declares the dockerfile syntax version
# to use on this file, this is the modern one

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7

ARG PYTHON_VERSION=3.13.3
FROM python:${PYTHON_VERSION}-slim as base 
# official slim variant of the Python image. minimal image with fewer
# pre-installed packages. 
# `as base` names this build stage "base" for possible use in
# multi-stage builds.

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app
# sets the working directory for all subsequent instructions in the
# Dockerfile. If /app does not exist, Docker will automatically create
# it. It is not present by default in the Python image, but Docker
# ensures it exists before running later commands. All file operations
# (like COPY, RUN, etc.) will be relative to /app after this line.

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
# ARG UID=10001
# RUN adduser \
#     --disabled-password \
#     --gecos "" \
#     --home "/nonexistent" \
#     --shell "/sbin/nologin" \
#     --no-create-home \
#     --uid "${UID}" \
#     appuser
# creates a non-privileged user named appuser with user ID `UID`
# This user: has no password and cannot log in interactively (nologin).
# Has no home directory. Is used to run the application instead of the
# default root user.
# If an attacker exploits the app, they get limited
# permissions, reducing the risk of damaging the host system or other
# containers. This is a best practice for production containers.

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

# Switch to the non-privileged user to run the application.
# USER appuser

# Copy the source code into the container.
COPY . .

# Expose the port that the application listens on.
# This tells Docker that the application inside the container listens on port 8000.
EXPOSE 8000

# Set environment variable
ENV DJANGO_ENV=dev
# Run the application.
CMD python manage.py migrate && \
    python manage.py load_initial_data && \
    python manage.py runserver 0.0.0.0:8000
